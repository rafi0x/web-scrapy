<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-uWxY/CJNBR+1zjPWmfnSnVxwRheevXITnMqoEIeG1LJrdI0GlVs/9cVSyPYXdcSF"
      crossorigin="anonymous"
    />
    <!-- <link rel="stylesheet" href="assets/style.css" /> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.3/xlsx.min.js"></script>
    <style>
      body {
        min-height: 100vh;
      }

      .wrapper {
        width: 80%;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: auto;
      }

      .tv_box {
        width: 100%;
      }

      select {
        width: 15% !important;
        height: 38px;
      }
      :is(select, input, button):focus {
        box-shadow: none !important;
        border-color: 0 !important;
      }

      .url_box {
        width: 100%;
      }

      .seleceTv {
        width: 75%;
        margin: 0 auto;
      }
      .seleceTv .select_export {
        width: 100% !important;
      }

      @media screen and (max-width: 600px) {
        .seleceTv {
          width: 100%;
          margin: 0 auto;
        }
      }
    </style>
  </head>
  <body>
    <div class="wrapper">
      <div class="tv_box">
        <h1 class="text-center" style="font-size: 10rem">Scrapy</h1>
        <hr style="width: 40%; margin: 0 auto" />
        <form class="mt-5" method="POST" action="/scraper" id="form0">
          <div class="url_box">
            <div class="input-group mb-3">
              <span class="input-group-text" id="basic-addon1"
                >Website link</span
              >
              <input
                type="text"
                name="url"
                class="form-control"
                id="basic-url"
                aria-describedby="basic-addon3"
                placeholder="https://example.com"
              />
            </div>
          </div>
          <div class="seleceTv d-flex flex-column">
            <div>
              <select
                style="margin: 0 auto"
                name="type"
                class="form-select form-select-sm page-selector"
                aria-label=".form-select-sm example"
              >
                <option value="single" selected>Single Page</option>
                <option value="multi">Multiple</option>
              </select>
            </div>

            <div class="input-group mb-3 mt-3 d-none page-input">
              <input
                type="text"
                name="pages"
                class="form-control"
                placeholder="How many pages?"
              />
              <input
                type="text"
                class="form-control"
                \
                name="nextBtn"
                placeholder="Next button selector"
                style="width: 60%"
              />
            </div>
          </div>
        </form>
        <div id="selectors" class="mt-5">
          <form class="form1">
            <div class="seleceTv d-flex">
              <select
                name="type"
                class="form-select form-select-sm"
                aria-label=".form-select-sm example"
              >
                <option selected disabled>What you need?</option>
                <option value="txt">TEXT</option>
                <option value="link">LINK</option>
                <option disabled value="img">IMAGE</option>
              </select>

              <div class="input-group mb-3">
                <input
                  type="text"
                  name="name"
                  class="form-control"
                  placeholder="name"
                />
                <input
                  type="text"
                  class="form-control"
                  name="data"
                  placeholder="Selector  ex: div.product-details > p"
                  style="width: 60%"
                />
              </div>
            </div>
          </form>
        </div>
        <div style="width: 10%; margin: 0 auto">
          <h5 style="color: red; width: 100%" class="text-center"></h5>
          <button
            style="width: 100%; margin: 0 auto"
            class="btn btn-success"
            id="addMore"
          >
            +
          </button>
        </div>

        <div class="button d-flex justify-content-center">
          <button
            type="submit"
            class="btn btn-primary mt-3 start-scrapy"
            style="width: 30%"
            form="form0"
          >
            start scrapy
          </button>
        </div>
        <div
          class="
            d-flex
            align-items-center
            justify-content-center
            mt-5
            exporter-option
            d-none
          "
        >
          <p style="margin: auto 0">Export:</p>
          <form method="post" id="exporter">
            <div class="seleceTv d-flex">
              <select
                name="type"
                class="select_export form-select form-select-sm export-selector"
                aria-label=".form-select-sm example"
              >
                <option selected disabled>where ?</option>
                <option value="xlsx">Excel</option>
                <option value="gsheet">GoogleSheet</option>
              </select>
            </div>
          </form>
          <button
            type="submit"
            class="btn btn-primary d-none export-button"
            form="exporter"
          ></button>
        </div>
      </div>
    </div>
    <script
      src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js"
      integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB"
      crossorigin="anonymous"
    ></script>
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.2/dist/js/bootstrap.min.js"
      integrity="sha384-PsUw7Xwds7x08Ew3exXhqzbhuEYmA2xnwc8BuD6SEr+UmEHlX8/MCltYEodzWA4u"
      crossorigin="anonymous"
    ></script>
    <script>
      // selector input form.
      let schema = `
        <form class="form1">
            <div class="seleceTv d-flex">
              <select
                name="type"
                class="form-select form-select-sm"
                aria-label=".form-select-sm example"
              >
                <option selected disabled>What you need?</option>
                <option value="txt">TEXT</option>
                <option value="link">LINK</option>
                <option disabled value="img">IMAGE</option>
              </select>

              <div class="input-group mb-3">
                <input
                  type="text"
                  name="name"
                  class="form-control"
                  placeholder="name"
                />
                <input
                  type="text"
                  class="form-control"
                  \
                  name="data"
                  placeholder="Selector  ex: div.product-details > p"
                  style="width: 60%"
                />
              </div>
            </div>
          </form>
      `;
      // selector inputs div
      let selectors = document.querySelector("#selectors");

      // forms
      let form = document.querySelector("#form0");
      let exportForm = document.querySelector("#exporter");

      // add more input btn
      let add = document.querySelector("#addMore");
      let startBtn = document.querySelector(".start-scrapy");

      // option select
      let pageSel = document.querySelector(".page-selector");
      let exportSel = document.querySelector(".export-selector");

      // store data for global use
      let global = {
        url: null,
        results: null,
        selector: [],
      };

      // function for save data to xls
      const exportExcel = (
        data,
        workSheetColumnNames,
        workSheetName,
        filePath
      ) => {
        const workBook = XLSX.utils.book_new();
        const workSheetData = [workSheetColumnNames, ...data];
        const workSheet = XLSX.utils.aoa_to_sheet(workSheetData);
        XLSX.utils.book_append_sheet(workBook, workSheet, workSheetName);
        XLSX.writeFile(workBook, filePath);
      };

      // click event on add btn
      let i = 0;
      add.onclick = () => {
        i++;
        if (i >= 4) {
          // show message on max count
          add.previousElementSibling.innerHTML = "cant add more";
          setTimeout(() => (add.previousElementSibling.innerHTML = ""), 2000); // clear error message after 3s
          add.classList.add("d-none");
        } else {
          selectors.insertAdjacentHTML("beforeend", schema); // insert form schema in selectors div
        }
      };

      // form event - for process and send data to server
      form.onsubmit = async (event) => {
        try {
          event.preventDefault();

          let selecForm = document.querySelectorAll(".form1"); // select all selectors_input forms

          let form0 = Object.fromEntries(new FormData(form).entries()); // get url and page inputs data
          global.url = form0.url; // set url in global

          if (form0.type === "single") {
            form0 = { url: form0.url };
          }

          // here will be pushed all selector obj
          selecForm.forEach((e) => {
            let ar = Object.fromEntries(new FormData(e).entries()); // create object for selector form data
            if (ar.data !== "" && ar.name !== "") global.selector.push(ar); // push to data[]
          });

          let response;
          if (form0.url && global.selector) {
            // changing the start button
            startBtn.classList.remove("btn-primary");
            startBtn.classList.add("btn-secondary");
            startBtn.setAttribute("disabled", "");
            startBtn.innerHTML = "Processing...";

            // api request
            response = await fetch("/scraper", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({
                ...form0,
                selector: global.selector,
              }), // the final object
            });
          }
          // send data to server
          global.results = await response.json();

          localStorage.setItem("scrapData", JSON.stringify(global.results)); // save result to localStorage

          console.log(global.results);

          // changing the start btn on result, also show the export option on success
          if (global.results) {
            startBtn.classList.remove("btn-primary");
            startBtn.classList.add("btn-success");
            startBtn.innerHTML = "Scraping Complete";
            document
              .querySelector(".exporter-option")
              .classList.remove("d-none");
          } else {
            startBtn.classList.add("btn-danger");
            startBtn.classList.remove("btn-primary");
            startBtn.innerHTML = "Scraping Failed";
          }
        } catch (error) {
          console.log(error);
        }
      };

      // selector for multipage or single
      pageSel.addEventListener("click", (e) => {
        let select = Object.fromEntries(new FormData(form).entries());
        let pageInput = document.querySelector(".page-input");

        if (select.type === "multi") {
          pageInput.classList.remove("d-none");
        } else {
          pageInput.classList.add("d-none");
        }
      });

      // export method selector
      exportSel.addEventListener("click", (e) => {
        let select = Object.fromEntries(new FormData(exportForm).entries());
        let btn = document.querySelector(".export-button");

        if (select.type === "xlsx") {
          btn.classList.remove("d-none");
          btn.innerHTML = "Download";
        } else if (select.type === "gsheet") {
          btn.classList.remove("d-none");
          btn.innerHTML = "GO";
          btn.setAttribute("href", "sheet.html");
        } else {
          btn.classList.add("d-none");
          btn.innerHTML = "";
        }
      });

      // the exporter
      exportForm.onsubmit = async (event) => {
        console.log("herlo");
        try {
          event.preventDefault(); // stop from reload
          let header = [...global.selector.map((e) => e.name)];
          const fileName = `${global.url.replace(/.+\/\/|www.|\..+/g, "")}.xls`;
          const workSheetName = global.url.replace(/.+\/\/|www.|\/.+/g, "");

          let exportType = Object.fromEntries(
            new FormData(exportForm).entries()
          );

          if (exportType.type === "xlsx") {
            exportExcel(global.results, header, workSheetName, fileName);
            localStorage.removeItem("scrapData");
            setTimeout(() => {
              location.reload();
            }, 1000); // on success take a reload for new start
          } else if (exportType.type === "gsheet") {
            location.replace("/auth-google");
          } else {
            location.reload();
          }
        } catch (e) {
          console.log(e);
        }
      };
    </script>
  </body>
</html>
